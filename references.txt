Polytexnic commits
  - https://github.com/softcover/polytexnic/pulls?q=is%3Apr+is%3Aclosed+author%3Askmetz

Rails Action Refactoring:
  - http://tutorials.jumpstartlab.com/projects/tag_cloud_refactoring.html

http://bit.ly/POODNC-rules
  Link to commit in your class repo which articulates the rules for refactoring.

OOD online reference
  http://sourcemaking.com/ - this is plagiarised from Martin Fowler's book
  "Refactoring" without attribution and without his permission.

Things to Read:
  Refactoring
    Martin Fowler: Refactoring, Improving the Design of Existing Code
      http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672
      Chapter 9, Simplifying Conditional Expressions

    Jay Fields: Refactoring, Ruby Edition
      http://www.amazon.com/Refactoring-Edition-Addison-Wesley-Professional-Series/dp/0321984137
      Chapter 9, Simplifying Conditional Expressions

    Joshua Kerievsky: Refactoring to Patterns
      http://www.amazon.com/Refactoring-Patterns-Addison-Wesley-Signature-Series-ebook/dp/B001TKD4RQ
      Chapter 7, Simplification


  Patterns
    Gamma, Helm, Johnsom, Vlissides (Gang of Four): Design Patterns,
    Elements of Reusable Object-Oriented Software
      http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612
      Browse the entire book

    Eric Freeman, Bates, Sierra: Head First Design Patterns
      http://www.amazon.com/Head-First-Design-Patterns-Freeman/dp/0596007124
      (But only if you can stand the 'Head First' style)


  Thinking about objects:
    Sandi Metz: Practical Object-Oriented Design
      http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330

    Rebecca Wirfs-Brock, Wilkerson, Wiener: Designing Object-Oriented Software
      http://www.amazon.com/Designing-Object-Oriented-Software-Rebecca-Wirfs-Brock/dp/0136298257

    Matt Weisfeld, The Object-Oriented Thought Process
      http://www.amazon.com/Object-Oriented-Thought-Process-Developers-Library/dp/0321861272

    Freeman and Pryce: Growing Object-Oriented Software, Guided by Tests (GOOS)
      http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627

    Eric Evans: Domain Driven Design
      http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215

    Domain Driven Design Quickly (pdf)
      http://www.infoq.com/minibooks/domain-driven-design-quickly

    Vaughn Vernon: Implementing Domain Driven Design
      http://www.amazon.com/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577

Things to Watch:
  Design
    http://bit.ly/sandi_metz_solid
    http://bit.ly/sandi_metz_less_path_to_better_design
    http://bit.ly/sandi_metz_make_a_mess
    http://bit.ly/matt_wynne_hexagonal_rails

  Refactoring
    http://bit.ly/neal_ford_rampant_emergence
    http://bit.ly/katrina_owen_therapeutic_refactoring
    http://bit.ly/ben_orenstein_refactoring

  Testing
    http://bit.ly/sandi_metz_magic_tricks_of_testing
    http://bit.ly/gregory_moeck_why_you_dont_get_mocks
    http://bit.ly/justin_searls_budgeting_reality
    http://bit.ly/justin_searls_to_mock_or_not
    http://bit.ly/michael_feathers_testing_revisted
    http://bit.ly/freeman_pryce_mock_roles_talk

  Pointy Headed
    http://bit.ly/rich_hickey_simple_made_easy

  Architecture
    http://bit.ly/chris_hunt_soa_at_square
    http://bit.ly/wilkinson_zacharakis_soa_without_tears_lumosity
    http://bit.ly/pignata_asynch_SOA_design
    http://bit.ly/brian_morton_services_and_rails_yammer
